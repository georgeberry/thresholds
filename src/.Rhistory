sample_df$sample = 0
observed_df$sample = 1
sample_df = rbind(sample_df, observed_df)
comparison_df = df[,c('var1', 'epsilon', 'threshold_ceil')]
comparison_df$sample = 0
observed_comparison_df = observed_df[,c('var1','epsilon','after_activation_alters')]
observed_comparison_df$sample = 1
observed_comparison_df$threshold_ceil = observed_comparison_df$after_activation_alters
observed_comparison_df$after_activation_alters = NULL
comparison_df = rbind(comparison_df, observed_comparison_df)
# plots for paper
ggplot(df, aes(x=threshold)) + geom_histogram(data=df[df$observed==1,], fill='blue', alpha=.2) +geom_histogram(data=df, fill='red', alpha=.2) + theme(text=element_text(size=20)) + theme(text=element_text(size=20)) + xlab("Threshold") + ylab("Count")
ggplot(comparison_df, aes(y=threshold_ceil, x=var1, color=factor(sample))) + geom_point() + geom_smooth(method=lm) + theme(text=element_text(size=20)) + scale_colour_discrete(name="", breaks=c(0, 1), labels=c("All Data", "Observed")) + ylab("Threshold") + xlab("Covariate Value")
output0 = lm(threshold ~ var1, data=df)
output1 = lm(threshold_ceil ~ var1, data=df)
output2 = lm(after_activation_alters ~ var1, data=observed_df)
output3 = tobit(after_activation_alters ~ var1,
left = 0,
right = Inf,
dist = "gaussian",
data=observed_df)
stargazer(output1, output2, output3)
ggplot(df[df$activated == 1,], aes(y=after_activation_alters, x=threshold)) + geom_point() + theme(text=element_text(size=20)) + xlab("True Threshold") + ylab("Naive Threshold Observation")
ggplot(observed_df, aes(y=after_activation_alters, x=threshold)) + geom_point() + theme(text=element_text(size=20)) + xlab("True Threshold") + ylab("Correct Observed Thresholds")
ggplot(sample_df[sample_df$activated == 1,], aes(y=after_activation_alters, x=threshold, color=factor(sample))) + geom_point(alpha=.5) + scale_colour_discrete(name="", breaks=c(0, 1), labels=c("All Data", "Observed")) + ylab("Observed Threshold") + xlab("True Threshold") + theme(text=element_text(size=20))
# prediction test 1
unobserved_df = df[df$observed == 0,]
predicted = predict(output3, unobserved_df)
predicted2 = predict(output2, unobserved_df)
predicted3 = predict(output0, df)
rmse_correct = sqrt(mean((unobserved_df$threshold - predicted)^2))
rmse_correct2 = sqrt(mean((unobserved_df$threshold - predicted2)^2))
rmse_wrong = sqrt(mean((unobserved_df$threshold - unobserved_df$after_activation_alters)^2))
rmse_ideal = sqrt(mean((df$threshold - predicted3)^2))
# prediction test 2
# rmse as we "train" on number of nodes
predict_with_k_first = function(df, k) {
u_df = df[df$observed == 0,]
o_df = df[df$observed == 1,] %>% arrange(activation_order)
k_df = head(o_df, k)
mod = lm(after_activation_alters ~ var1, data=k_df)
predicted_vals = predict(mod, u_df)
rmse = sqrt(mean((u_df$threshold - predicted_vals)^2))
return(rmse)
}
pred_result_df = data.frame(k = numeric(), rmse = numeric())
for (i in 10:nrow(observed_df)) {
rmse = predict_with_k_first(df, i)
newrow = data.frame(k = i, rmse = rmse)
pred_result_df = rbind(pred_result_df, newrow)
}
ggplot(pred_result_df, aes(x=k, y=rmse)) + geom_smooth(se=F) + geom_hline(aes(yintercept=rmse_wrong)) + ylab("RMSE") + xlab("Number of Training Observations") + theme(text=element_text(size=20))
# prediction test 3
predict_all_with_k_first = function(df, k) {
u_df = df[df$observed == 0,]
o_df = df[df$observed == 1,] %>% arrange(activation_order)
k_df = head(o_df, k)
mod = lm(after_activation_alters ~ var1, data=k_df)
predicted_vals = predict(mod, df)
rmse = sqrt(mean((df$threshold - predicted_vals)^2))
return(rmse)
}
pred_result_df = data.frame(k = numeric(), rmse = numeric())
for (i in 10:nrow(observed_df)) {
rmse = predict_all_with_k_first(df, i)
newrow = data.frame(k = i, rmse = rmse)
pred_result_df = rbind(pred_result_df, newrow)
}
ggplot(pred_result_df, aes(x=k, y=rmse)) + geom_smooth(se=F) + geom_hline(aes(yintercept=rmse_wrong)) + ylab("RMSE") + xlab("Number of Training Observations") + theme(text=element_text(size=20)) + geom_hline(aes(yintercept=rmse_ideal)) + expand_limits(x = 0, y = 0)
mod3 = glm(formula = tie.present ~ gender + age + I(age^2) + ope + con + ext + agr + neu + school_names + work_position, family = binomial(), data=edge_df)
summary(mod3)
triad_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/triads_edge_diff_df_981')
head(triad_df)
mod3 = glm(formula = tie.present ~ gender + age + I(age^2) + ope + con + ext + agr + neu + school_names + work_position, family = binomial(), data=triad_df)
summary(mod3)
random_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/random_edge_test_df_0.csv')
colnames(random_df)
formula = tie.present ~ gender.sum + age.sum + ope.sum + con.sum + ext.sum + agr.sum + neu.sum + school_names.sum + work_position.sum + gender.diff + age.diff + ope.diff + con.diff + ext.diff + agr.diff + neu.diff + school_names.diff + work_position.diff
mod3 = glm(formula = formula, family = binomial(), data=random_df)
summary(mod3)
mod4 = lm(formula = formula, data=random_df)
summary(mod4)
mod_random = glm(formula = formula, family = binomial(), data=random_df)
summary(mod_random)
mod_triads = glm(formula = formula, family = binomial(), data=random_df)
summary(mod_triads)
mod_unobserved = glm(formula = formula, family = binomial(), data=random_df)
summary(mod_unobserved)
triad_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/triads_edge_test_df_0.csv')
unobserved_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/unobserved_edge_test_df_0.csv')
random_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/random_edge_test_df_0.csv')
formula = tie.present ~ gender.sum + age.sum + ope.sum + con.sum + ext.sum + agr.sum + neu.sum + school_names.sum + work_position.sum + gender.diff + age.diff + ope.diff + con.diff + ext.diff + agr.diff + neu.diff + school_names.diff + work_position.diff
mod_random = glm(formula = formula, family = binomial(), data=random_df)
mod_random = glm(formula = formula, family = binomial(), data=random_df)
summary(mod_random)
mod_triads = glm(formula = formula, family = binomial(), data=triad_df)
summary(mod_triads)
mod_unobserved = glm(formula = formula, family = binomial(), data=unobserved_df)
summary(mod_unobserved)
sum_df = in_sample_df('/Users/g/Google Drive/project-RA/educ/myp/data/in_sample_cov_df.csv')
in_samp_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/in_sample_cov_df.csv')
summary(in_samp_df)
library(pastecs)
install.packages("pastecs")
describe(in_samp_df)
library(pastecs)
library(pastecs)
describe(in_samp_df)
stat.desc(in_samp_df)
install.packages("psych")
library(psych)
describe(in_samp_df)
stargazer(describe(in_samp_df))
library(stargazer)
library(psych)
in_samp_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/in_sample_cov_df.csv')
summary(in_samp_df)
stargazer(describe(in_samp_df))
describe(in_samp_df)
d = describe(in_samp_df)
d
stargazer(d)
class(d)
colnames(d)
in_samp_df[in_samp_df$age > 22,]
in_samp_df$age
nrow(in_samp_df[in_samp_df$age > 22,])
d
in_samp_df = in_samp_df[in_samp_df$age > 22,]
d = describe(in_samp_df)
d
in_samp_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/in_sample_cov_df.csv')
in_samp_df = in_samp_df[in_samp_df$age > 21,]
d = describe(in_samp_df)
d$vars = NULL
d$trimmed = NULL
d$mad = NULL
d$range = NULL
d$se = NULL
d
d$kurtosis = NULL
stargazer(d)
is.data.frame(d)
stargazer(d)
transpose(d)
t(d)
stargazer(t(d))
in_samp_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/in_sample_cov_df.csv')
in_samp_df = in_samp_df[in_samp_df$age > 21,]
d = describe(in_samp_df)
d$userid = NULL
d$vars = NULL
d$trimmed = NULL
d$mad = NULL
d$range = NULL
d$se = NULL
d$kurtosis = NULL
stargazer(t(d))
formula = tie.present ~ gender.sum + age.sum + ope.sum + con.sum + ext.sum + agr.sum + neu.sum + school_names.sum + work_position.sum + gender.diff + age.diff + ope.diff + con.diff + ext.diff + agr.diff + neu.diff + school_names.diff + work_position.diff
mod_random = glm(formula = formula, family = binomial(), data=random_df)
summary(mod_random)
mod_triads = glm(formula = formula, family = binomial(), data=triad_df)
summary(mod_triads)
mod_unobserved = glm(formula = formula, family = binomial(), data=unobserved_df)
summary(mod_unobserved)
dstargazer(mod_random)
stargazer(mod_random)
stargazer(mod_random, title='Regression Sampling from Random Pairs')
stargazer(mod_triads, title='Regression Sampling from Open Triads')
stargazer(mod_runobserved, title='Regression Sampling from Unobserved Pairs')
stargazer(mod_unobserved, title='Regression Sampling from Unobserved Pairs')
stargazer(mod_random, mod_triads, mod_unobserved, title='Regression Results', dep.var.labels=c('Tie Exists'), no.space=TRUE)
cov_labels = c('Gender Sum', 'Age Sum', 'Openness Sum', 'Conscientiousness Sum', 'Extraversion Sum', 'Agreeableness Sum', 'Neuroticism Sum', 'Education Sum', 'Occupation Sum', 'Gender Diff', 'Age Diff', 'Openness Diff', 'Conscientiousness Diff', 'Extraversion Diff', 'Agreeableness Diff', 'Neuroticism Diff', 'Education Diff', 'Occupation Diff')
stargazer(mod_random, mod_triads, mod_unobserved, title='Regression Results', dep.var.labels=c('Tie Exists'), column.labels=c("Random", "Open Triads", "Unobserved"), covariate.labels=cov_labels, no.space=TRUE)
colnames(in_samp_df)
d
stargazer(d, title='Descriptive Statistics')
stargazer(t(d), title='Descriptive Statistics')
d
d$userid = NULL
d$vars = NULL
d$trimmed = NULL
d$mad = NULL
d$range = NULL
d$se = NULL
d$kurtosis = NULL
d$funct = NULL
d$posemo = NULL
d$network_size = NULL
d$betweenness=NULL
d$density=NULL
d$transitivity=NULL
stargazer(t(d), title='Descriptive Statistics')
d
d$userid = NULL
in_samp_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/in_sample_cov_df.csv')
in_samp_df = in_samp_df[in_samp_df$age > 21,]
d = describe(in_samp_df)
d$userid = NULL
d$vars = NULL
d$trimmed = NULL
d$mad = NULL
d$range = NULL
d$se = NULL
d$kurtosis = NULL
d$funct = NULL
d$posemo = NULL
d$network_size = NULL
d$betweenness=NULL
d$density=NULL
d$transitivity=NULL
d
d = t(d)
d
d$funct = NULL
d$posemo = NULL
d$network_size = NULL
d$betweenness=NULL
d$density=NULL
d$transitivity=NULL
d
in_samp_df = read.csv('/Users/g/Google Drive/project-RA/educ/myp/data/in_sample_cov_df.csv')
in_samp_df = in_samp_df[in_samp_df$age > 21,]
d = describe(in_samp_df)
d$userid = NULL
d$vars = NULL
d$trimmed = NULL
d$mad = NULL
d$range = NULL
d$se = NULL
d$kurtosis = NULL
d
rownames(d)
d[!rownames(g) %in% c('userid*')]
d[!rownames(d) %in% c('userid*')]
d[!rownames(d) %in% c('userid*'),]
d
d = [!rownames(d) %in% rows_to_remove,]
d = d[!rownames(d) %in% rows_to_remove,]
rows_to_remove = c('*userid', 'funct', 'posemo', 'network_size', 'betweenness', 'density', 'transitivity')
d = d[!rownames(d) %in% rows_to_remove,]
d
rows_to_remove = c('userid*', 'funct', 'posemo', 'network_size', 'betweenness', 'density', 'transitivity')
d = d[!rownames(d) %in% rows_to_remove,]
d
rows_to_remove = c('userid*', 'funct', 'posemo', 'network_size', 'betweenness', 'density', 'transitivity', 'negemo', 'brokerage')
d = d[!rownames(d) %in% rows_to_remove,]
d
stargazer(t(d), title='Descriptive Statistics')
rows_to_remove = c('userid*', 'relationship_status', 'funct', 'posemo', 'network_size', 'betweenness', 'density', 'transitivity', 'negemo', 'brokerage')
d = d[!rownames(d) %in% rows_to_remove,]
stargazer(t(d), title='Descriptive Statistics')
rows_to_remove = c('userid*', 'relationship_status', 'funct', 'posemo', 'network_size', 'betweenness', 'density', 'transitivity', 'negemo', 'brokerage', 'degree_observed')
d = d[!rownames(d) %in% rows_to_remove,]
stargazer(t(d), title='Descriptive Statistics')
d
in_samp_df
in_samp_df$location_lon
rows_to_remove = c('userid*', 'relationship_status', 'funct', 'posemo', 'network_size', 'betweenness', 'density', 'transitivity', 'negemo', 'brokerage', 'degree_observed', 'location_lon', 'location_lat')
d = d[!rownames(d) %in% rows_to_remove,]
stargazer(t(d), title='Descriptive Statistics')
setwd('/Users/g/Google Drive/project-thresholds/thresholds/src/')
## Prep Files ##
DATA_PATH = "../data/"
all_files = list.files(DATA_PATH)
all_batches = SimplifyFiles(all_files)
library(stringr)
library(dplyr)
library(AER)
library(ggplot2)
# strips the number of the run
SimpleFilename = function(filename){
s = str_replace_all(filename, "__", "~")
s = str_split(s, "_")
s = s[[1]][1]
s = str_replace_all(s, "~", "__")
return(s)
}
# simplifies all files
SimplifyFiles = function(file_vector){
simplified_files = c()
for (f in file_vector){
f_simple = SimpleFilename(f)
simplified_files = union(simplified_files, c(f_simple))
}
return(simplified_files)
}
# all reps in a batch
GetAllRuns = function(batch_name){
f_template = paste("../data/", batch_name, "*", sep="")
return(Sys.glob(f_template))
}
ParseParams = function(batch_name){
sections = str_split(batch_name, "__")[[1]]
eq = ParseEqString(sections[2])
g = ParseGraphString(sections[3])
res = cbind(eq, g)
return(res)
}
ParseEqString = function(eq_str){
eq = str_split(eq_str, "[cne]")[[1]]
eq = eq[2:length(eq)]
df = data.frame(constant = NA)
for (idx in 1:length(eq)){
param = eq[idx]
# constant
if (idx == 1) {
constant = as.numeric(substr(param, 1, 1))
df$constant = constant
}
# error
else if (idx == length(eq)) {
error_sd_str = str_replace(substr(param, 3, 5), "-", ".")
error_sd = as.numeric(error_sd_str)
df$error_sd = error_sd
}
# everything else
else {
coefficient = as.numeric(str_replace(substr(param, 1, 3), "-", "."))
sd = as.numeric(str_replace(substr(param, 5, 7), "-", "."))
if ("var1_coef" %in% colnames(df)){
df$var2_coef = coefficient
df$var2_sd = sd
} else {
df$var1_coef = coefficient
df$var1_sd = sd
}
}
}
return(df)
}
ParseGraphString = function(g_str){
# hacky, but if 2nd char is a 0, then we know the first 2 are mean degree
graph_type = str_replace_all(g_str, "([:digit:]|[:punct:])", "")
g_spl = str_split(g_str, "[:alpha:]+")[[1]]
size = g_spl[1]
param = as.numeric(str_replace(g_spl[2], "-", "."))
if (substr(size, 2, 2) == "0") {
md = as.numeric(substr(size, 1, 2))
gs = as.numeric(substr(size, 3, nchar(size)))
} else {
md = as.numeric(substr(size, 1, 1))
gs = as.numeric(substr(size, 2, nchar(size)))
}
df = data.frame(graph_param = param, mean_deg = md, graph_size = gs, graph_type = graph_type)
return(df)
}
## rmse fns ##
CalcRmse = function(true_y, pred_y){
rmse = sqrt(mean((true_y - pred_y)^2))
return(rmse)
}
# gives imporant params + RMSE for one batch
RmseOLS = function(formula, df, y){
observed_df = df[df$observed == 1,]
mod = lm(formula, data=observed_df)
print(summary(mod))
rmse = CalcRmse(y, predict(mod, df))
return(rmse)
}
RmseTobit = function(formula, df, y){
observed_df = df[df$observed == 1,]
mod = tobit(formula=formula, left=0, right=Inf, data=observed_df)
rmse = CalcRmse(y, predict(mod, df))
return(rmse)
}
# can create a param + rmse line here, with rmse variance
BatchRmse = function(all_batch_files, formula){
rmse_df = data.frame(rmse_ols = numeric(0), rmse_tobit = numeric(0))
for (f in all_batch_files){
df = read.csv(f)
df$after_activation_alters = df$after_activation_alters - .5
df$threshold = ceiling(df$threshold)
rmse_ols = RmseOLS(formula, df, df$threshold)
rmse_tobit = 1
#rmse_tobit = RmseTobit(formula, df, df$threshold)
rmse_df = rbind(rmse_df, data.frame(rmse_ols = rmse_ols, rmse_tobit = rmse_tobit))
}
means = apply(rmse_df, 2, mean)
names(means) = c("Mean_RMSE_OLS", "Mean_RMSE_Tobit")
means = data.frame(as.list(means))
ses = apply(rmse_df, 2, sd) / sqrt(nrow(rmse_df))
names(ses) = c("SE_RMSE_OLS", "SE_RMSE_Tobit")
ses = data.frame(as.list(ses))
return(cbind(means, ses))
}
# gives RMSE at number obs (maybe every 10?)
RmseAtKObs = function(formula, df, y){
rmse_at_k_df = data.frame(k=numeric(0), rmse_OLS=numeric(0))
o_df = df[df$observed == 1,] %>% arrange(activation_order)
k_seq = seq(10, nrow(o_df), 10)
for (k in k_seq){
k_df = head(o_df, k)
mod = lm(formula, data=k_df)
rmse_at_k = CalcRmse(y, predict(mod, df))
rmse_at_k_df = rbind(rmse_at_k_df, data.frame(k=k, rmse_OLS=rmse_at_k))
}
return(rmse_at_k_df)
}
# want to summarize the 100 runs at k obs in a df
# can do my own sd at each k val
# output: df where cols are mean/SE
#           rows are vals of k
BatchRmseAtK = function(all_batch_files, formula){
rmse_at_k_df = data.frame(k=numeric(0), rmse_OLS=numeric(0))
for (f in all_batch_files){
df = read.csv(f)
df$after_activation_alters = df$after_activation_alters - .5
df$threshold = ceiling(df$threshold)
rmse_at_k = RmseAtKObs(formula, df, df$threshold)
rmse_at_k_df = rbind(rmse_at_k_df, rmse_at_k)
}
summary_df = rmse_at_k_df %>%
group_by(k) %>%
summarize(mean_rmse=mean(rmse_OLS), sd_rmse=sd(rmse_OLS), n=n()) %>%
mutate(se_rmse = sd_rmse / sqrt(n))
return(summary_df)
}
# attach all params to the other two output dfs
ProcessBatch = function(batch_name){
param_df = ParseParams(batch_name)
all_batch_files = GetAllRuns(batch_name)
rmse_df = BatchRmse(all_batch_files, after_activation_alters~var1)
rmse_at_k_df = BatchRmseAtK(all_batch_files, after_activation_alters~var1)
# add params
rmse_df$graph_type = param_df$graph_type
rmse_df$graph_size = param_df$graph_size
rmse_df$error_sd = param_df$error_sd
rmse_at_k_df$graph_type = param_df$graph_type
rmse_at_k_df$graph_size = param_df$graph_size
rmse_at_k_df$error_sd = param_df$error_sd
return_list = list(rmse_df = rmse_df, rmse_at_k_df = rmse_at_k_df)
return(return_list)
}
ProcessAllBatches = function(all_batches){
param_df = NULL
rmse_df = NULL
k_df = NULL
for (b in all_batches){
if (nchar(b) > 20){
r = ProcessBatch(b)
batch_rmse_df = r$rmse_df
batch_k_df = r$rmse_at_k_df
batch_params = r$params
if (is.null(rmse_df)){
rmse_df = batch_rmse_df
} else {
rmse_df = rbind(rmse_df, batch_rmse_df)
}
if (is.null(k_df)){
k_df = batch_k_df
} else {
k_df = rbind(k_df, batch_k_df)
}
}
}
return(list(k_df=k_df, rmse_df=rmse_df))
}
BatchRmse = function(all_batch_files, formula){
rmse_df = data.frame(rmse_ols = numeric(0), rmse_tobit = numeric(0))
for (f in all_batch_files){
df = read.csv(f)
df$after_activation_alters = df$after_activation_alters - .5
df$threshold = ceiling(df$threshold)
rmse_ols = RmseOLS(formula, df, df$threshold)
rmse_tobit = 1
rmse_tobit = RmseTobit(formula, df, df$threshold)
rmse_df = rbind(rmse_df, data.frame(rmse_ols = rmse_ols, rmse_tobit = rmse_tobit))
}
means = apply(rmse_df, 2, mean)
names(means) = c("Mean_RMSE_OLS", "Mean_RMSE_Tobit")
means = data.frame(as.list(means))
ses = apply(rmse_df, 2, sd) / sqrt(nrow(rmse_df))
names(ses) = c("SE_RMSE_OLS", "SE_RMSE_Tobit")
ses = data.frame(as.list(ses))
return(cbind(means, ses))
}
all_files = list.files(DATA_PATH)
all_batches = SimplifyFiles(all_files)
## Analyze ##
r = ProcessAllBatches(all_batches)
BatchRmse = function(all_batch_files, formula){
rmse_df = data.frame(rmse_ols = numeric(0), rmse_tobit = numeric(0))
for (f in all_batch_files){
df = read.csv(f)
df$after_activation_alters = df$after_activation_alters - .5
df$threshold = ceiling(df$threshold)
rmse_ols = RmseOLS(formula, df, df$threshold)
rmse_tobit = 1
#rmse_tobit = RmseTobit(formula, df, df$threshold)
rmse_df = rbind(rmse_df, data.frame(rmse_ols = rmse_ols, rmse_tobit = rmse_tobit))
}
means = apply(rmse_df, 2, mean)
names(means) = c("Mean_RMSE_OLS", "Mean_RMSE_Tobit")
means = data.frame(as.list(means))
ses = apply(rmse_df, 2, sd) / sqrt(nrow(rmse_df))
names(ses) = c("SE_RMSE_OLS", "SE_RMSE_Tobit")
ses = data.frame(as.list(ses))
return(cbind(means, ses))
}
DATA_PATH = "../data/"
all_files = list.files(DATA_PATH)
all_batches = SimplifyFiles(all_files)
## Analyze ##
r = ProcessAllBatches(all_batches)
RmseOLS = function(formula, df, y){
observed_df = df[df$observed == 1,]
mod = lm(formula, data=observed_df)
rmse = CalcRmse(y, predict(mod, df))
return(rmse)
}
r = ProcessAllBatches(all_batches)
